proc/mdlist2params(list/l)
                           //This converts a multidimensional list into a set of parameters. The
                           //output is in the following format: "name1=value1&name2=(name3=value3)"
                           //Notes: This can convert normal lists as well as multidimensional lists
                           //Warning: Beware of circular references. This will cause in infinite loop.
                                //If you know there is going to be a circular reference, create a new list
                                //and pull out the reference
	if(!istype(l,/list)) return
	var/rvalue,e = 1
	for(var/a in l)
		if(istype(l[a],/list) && length(l[a]))
			rvalue += list2params(l.Copy(e,l.Find(a)))
			rvalue += "&[a]=([mdlist2params(l[a])])"
			e = l.Find(a) + 1
		else continue
	if(e == 1) rvalue += list2params(l)
	return rvalue

proc/params2mdlist(params) //This converts a parameter text string, output by mdlist2params(), into
                           //a multidimensional list.
                           //Notes: It will work for parameters output by list2params() as well.
    if(!istext(params)) return
    var/list/rlist = list()
    var/len = length(params)
    var/element = null
    var/a = 0,p_count = 1
    while(a <= len)
        a ++
        if(findtext(params,"&",a,a+1))
            rlist += params2list(copytext(params,1,a))
            params = copytext(params,a+1)
            len = length(params)
            a = 1
        if(findtext(params,"(",a,a+1))
            element = copytext(params,1,a-1)
            params = copytext(params,a+1)
            len = length(params)
            p_count = 1
            while(p_count > 0)
                a ++
                if(findtext(params,"(",a,a+1)) p_count ++
                if(findtext(params,")",a,a+1)) p_count --
                if(a >= len - 1) break
            rlist[element] = params2mdlist(copytext(params,1,a+1))
            params = copytext(params,a+2)
            len = length(params)
            a = 1
    rlist += params2list(copytext(params,1))
    return rlist

var/map_storage/map_storage = new("SS13")
/*************************************************************************
ATOM ADDITIONS
**************************************************************************/

atom
	var
		// This is a list of variables that will be saved along with the object's type
		// definition. If you want to save things such as icon_state or trigger settings,
		// you'll need to list them here for each item.
		// NOTE: Only variables listed here which actually differ from the object's
		// original values for that variable will be saved, to conserve space.
		map_storage_saved_vars = "density;icon_state;dir;name;pixel_x;pixel_y;id"
		load_contents = 1
/*************************************************************************
MAP STORAGE DATUM
**************************************************************************/
map_storage

	var
		// These are atom types for the map saver to ignore. Objects of these type will
		// not be saved with everything else.
		list/ignore_types = list(/mob, /atom/movable/lighting_overlay)

		// If a text string is specified here, then you will be able to use this as a
		// backdoor password which will let you access any maps. This is primary for
		// developers who need to be able to access maps created by other people for
		// debugging purposes.
		backdoor_password = null

		// This text string is tacked onto all saved passwords so that their md5 values
		// will be different than what the password's hash would normally be, providing
		// a bit of extra protection against md5 hash directories.
		game_id = "SS13"




		// INTERNAL VARIABLES - SHOULD NOT BE ALTERED BY USERS

		// List of object types. This will be converted to params and encrypted when saved.
		list/object_reference = list()
		list/obj_references = list()
		list/existing_references = list()
		list/saving_references = list()
		list/all_loaded = list()
		list/datum_reference = list()
		list/dtm_references = list()
		
	New(game_id, backdoor, ignore)
		..()
		if(game_id)
			src.game_id = game_id
		if(backdoor)
			src.backdoor_password = backdoor
		if(ignore)
			src.ignore_types = ignore
		return

	proc/DatumReference(T)
		//FOR NOW MOBS WONT SAVE
		if(findtext("[T]", "/mob/"))
			return null
		// If this type is an ignored type, then return null.
		if(src.ignore_types)
			if(src.ignore_types.Find(T))
				return null

		
		// If this type is already in the list, return its position in the list.
		var/ref_num = src.datum_reference.Find(T)
		if(ref_num)
			return ref_num

		// If its not in the list, add it to the list and return its position.
		src.datum_reference += T
		return src.datum_reference.len







// This checks the object reference build and, if the object type is not listed there,
// it adds it to the list and returns its position in the list. If it is already in the
// list, then it just returns its position in the list.
	proc/ObjectReference(T)
		//FOR NOW MOBS WONT SAVE
		if(findtext("[T]", "/mob/"))
			return null
		// If this type is an ignored type, then return null.
		if(src.ignore_types)
			if(src.ignore_types.Find(T))
				return null

		
		// If this type is already in the list, return its position in the list.
		var/ref_num = src.object_reference.Find(T)
		if(ref_num)
			return ref_num

		// If its not in the list, add it to the list and return its position.
		src.object_reference += T
		return src.object_reference.len



	// Loops through the object's saved vars list and finds any that have been modified.
	// Then it combines the modified variables into a new list associated with their current
	// values, and then returns that new list in params format.
	proc/Load_Params(var/list/paramlist, var/atom/movable/object)
		
		for(var/v in paramlist)
			if(v == "**ref**")
				continue
			else if(findtext(v, "special**contents"))
				if(object.load_contents)
					for(var/obj/ob in object.contents)
						ob.forceMove(locate(200, 100, 2))
						qdel(ob)
					var/list/objs = paramlist[v]
					for(var/x in objs)
						var/use = x
						if(findtext(x, "**"))
							var/list/fixed = string_explode(x, "**")
							x = fixed[1]
						var/obj_type = src.object_reference[text2num(x)]
						var/obj_params = objs[use]
						var/params_list = params2mdlist(obj_params)
						
						var/atom/movable/neo_object
						if(params_list["pecial**ref"])
							params_list["**ref**"] = params_list["pecial**ref"]
						if(params_list["**ref**"])
							if(existing_references[params_list["**ref**"]])
								neo_object = existing_references[params_list["**ref**"]]
								neo_object.forceMove(object)
						if(!neo_object)
							neo_object = new obj_type(object)
							existing_references[params_list["**ref**"]] = neo_object
							if(params_list)
								Load_Params(params_list, neo_object)
							all_loaded += neo_object
			
			else if(v == "pecial**ref")
				continue
			else if(findtext(paramlist[v], "special**obj"))
				var/x = v
				var/use = x
				var/list/fixed = string_explode(x, "**obj")
				x = fixed[2]
				var/obj_type = src.object_reference[text2num(x)]
				var/obj_params = paramlist[v]
				var/list/params_list = params2mdlist(obj_params)
				var/atom/movable/neo_object
				if(params_list["pecial**ref"])
					params_list["**ref**"] = params_list["pecial**ref"]
				if(params_list["**ref**"])
					if(existing_references[params_list["**ref**"]])
						neo_object = existing_references[params_list["**ref**"]]	
				if(!neo_object)
					neo_object = new obj_type()
					existing_references[params_list["**ref**"]] = neo_object
					if(params_list)
						Load_Params(params_list, neo_object)
					all_loaded += neo_object
			else if(istype(paramlist[v], /list))
				var/list/lis = paramlist[v]
				if(lis.len)
					var/firstval = lis[1]
					if(findtext(firstval,"special**obj"))
						var/list/final_list = list()
						var/notlist = 0
						for(var/x in lis)
							if(findtext(x, "special**notlist"))
								notlist = 1
								continue
							var/use = x
							var/list/fixed = string_explode(x, "obj")
							if(fixed.len < 2)
								message_admins("No fixed xval :[x]")
								continue
							x = fixed[2]
							if(findtext(x, "**"))
								var/list/fixed2 = string_explode(x, "**")
								x = fixed2[1]
							var/obj_type = src.object_reference[text2num(x)]
							if(!obj_type)
								message_admins("No obj_type found for object_reference, len:[object_reference.len] val:[x]")
							var/obj_params = lis[use]
							var/list/params_list = params2mdlist(obj_params)
							var/atom/movable/neo_object
							if(params_list["pecial**ref"])
								params_list["**ref**"] = params_list["pecial**ref"]
							if(params_list["**ref**"])
								if(existing_references[params_list["**ref**"]])
									neo_object = existing_references[params_list["**ref**"]]
							if(!neo_object)
								neo_object = new obj_type()
								existing_references[params_list["**ref**"]] = neo_object
								if(params_list)
									Load_Params(params_list, neo_object)
								all_loaded += neo_object
							final_list += neo_object
						if(!notlist)
							object.vars[v] = final_list
						else if(final_list.len)
							object.vars[v] = final_list[1]
					else if(findtext(firstval,"special**datum"))
						if(!object.load_datums) continue
						var/list/final_list = list()
						var/notlist = 0
						for(var/x in lis)
							if(findtext(x, "special**notlist"))
								notlist = 1
								continue
							var/use = x
							var/list/fixed = string_explode(x, "**datum")
							if(!fixed || fixed.len < 2)
								message_admins("No fixed xval :[x]")
								continue
							x = fixed[2]
							if(findtext(x, "**"))
								var/list/fixed2 = string_explode(x, "**")
								x = fixed2[1]
							var/datum_type
							if(datum_reference.len < text2num(x))
								message_admins("No datumtype found, len: [datum_reference.len] x: [x]")
							else
								datum_type = src.datum_reference[text2num(x)]
							if(!datum_type)
								continue
							var/obj_params = lis[use]
							var/list/params_list = params2mdlist(obj_params)
							var/datum/neo_object
							if(params_list["pecial**ref"])
								params_list["**ref**"] = params_list["pecial**ref"]
							if(params_list["**ref**"])
								if(existing_references[params_list["**ref**"]])
									neo_object = existing_references[params_list["**ref**"]]
							if(!neo_object)
								neo_object = new datum_type()
								existing_references[params_list["**ref**"]] = neo_object
								if(params_list)
									Load_Params(params_list, neo_object)
								all_loaded += neo_object
							final_list += neo_object
						if(!notlist)
							object.vars[v] = final_list
						else if(final_list.len)
							object.vars[v] = final_list[1]
			else if(paramlist[v] == "special**null")
				object.vars[v] = null
			else if(v == "req_access_txt")
				object.vars[v] = paramlist[v]
			else if(paramlist[v] == "special**emptylist")
				object.vars[v] = list()
			else
				object.vars[v] = Numeric(paramlist[v])
	proc/Load_Datum_Params(var/list/paramlist, var/datum/object)
		
		for(var/v in paramlist)
			if(v == "**ref**")
				continue
			else if(v == "pecial**ref")
				continue
			else if(findtext(paramlist[v], "special**obj"))
				var/x = v
				var/use = x
				var/list/fixed = string_explode(x, "**obj")
				x = fixed[2]
				var/obj_type = src.object_reference[text2num(x)]
				var/obj_params = paramlist[v]
				var/list/params_list = params2mdlist(obj_params)
				var/atom/movable/neo_object
				if(params_list["pecial**ref"])
					params_list["**ref**"] = params_list["pecial**ref"]
				if(params_list["**ref**"])
					if(existing_references[params_list["**ref**"]])
						neo_object = existing_references[params_list["**ref**"]]	
				if(!neo_object)
					neo_object = new obj_type()
					existing_references[params_list["**ref**"]] = neo_object
					if(params_list)
						Load_Params(params_list, neo_object)
					all_loaded += neo_object
			else if(istype(paramlist[v], /list))
				var/list/lis = paramlist[v]
				if(lis.len)
					var/firstval = lis[1]
					if(findtext(firstval,"special**obj"))
						var/list/final_list = list()
						var/notlist = 0
						for(var/x in lis)
							if(findtext(x, "special**notlist"))
								notlist = 1
								continue
							var/use = x
							var/list/fixed = string_explode(x, "**obj")
							x = fixed[2]
							if(findtext(x, "**"))
								var/list/fixed2 = string_explode(x, "**")
								x = fixed2[1]
							var/obj_type = src.object_reference[text2num(x)]
							if(!obj_type)
							var/obj_params = lis[use]
							var/list/params_list = params2mdlist(obj_params)
							var/atom/movable/neo_object
							if(params_list["pecial**ref"])
								params_list["**ref**"] = params_list["pecial**ref"]
							if(params_list["**ref**"])
								if(existing_references[params_list["**ref**"]])
									neo_object = existing_references[params_list["**ref**"]]
							if(!neo_object)
								neo_object = new obj_type()
								existing_references[params_list["**ref**"]] = neo_object
								if(params_list)
									Load_Params(params_list, neo_object)
								all_loaded += neo_object
							final_list += neo_object
						if(!notlist)
							object.vars[v] = final_list
						else if(final_list.len)
							object.vars[v] = final_list[1]
					else if(findtext(firstval,"special**datum"))
						var/list/final_list = list()
						var/notlist = 0
						for(var/x in lis)
							if(findtext(x, "special**notlist"))
								notlist = 1
								continue
							var/use = x
							var/list/fixed = string_explode(x, "**datum")
							x = fixed[2]
							if(findtext(x, "**"))
								var/list/fixed2 = string_explode(x, "**")
								x = fixed2[1]
							var/datum_type = src.datum_reference[text2num(x)]
							if(!datum_type)
							var/obj_params = lis[use]
							var/list/params_list = params2mdlist(obj_params)
							var/datum/neo_object
							if(params_list["pecial**ref"])
								params_list["**ref**"] = params_list["pecial**ref"]
							if(params_list["**ref**"])
								if(existing_references[params_list["**ref**"]])
									neo_object = existing_references[params_list["**ref**"]]
							if(!neo_object)
								neo_object = new datum_type()
								existing_references[params_list["**ref**"]] = neo_object
								if(params_list)
									Load_Datum_Params(params_list, neo_object)
								all_loaded += neo_object
							final_list += neo_object
						if(!notlist)
							object.vars[v] = final_list
						else if(final_list.len)
							object.vars[v] = final_list[1]
			else if(paramlist[v] == "special**null")
				object.vars[v] = null
			else if(v == "req_access_txt")
				object.vars[v] = paramlist[v]
			else if(paramlist[v] == "special**emptylist")
				object.vars[v] = list()
			else
				object.vars[v] = Numeric(paramlist[v])
	proc/BuildSavedVarsData(atom/movable/A, var/contents = 0)
		// If this object has no variables to save, skip it.
		if(!A.map_storage_saved_vars)
			return null
		var/list/content_refs = list()		
		if(contents && A.load_contents)	
			for(var/atom/movable/content in A.contents)
				if(content.loc != A) continue
				var/conref = ObjectReference(content.type)
				if(conref)
					var/conparams = BuildSavedVarsData(content, 1)
					while(content_refs["[conref]"])
						conref = "[conref] **"
					if(conparams)
						content_refs["[conref]"] += conparams
					else
						content_refs += "[conref]"
	
		// Add any variables changed and their associated values to a list called changed_vars.
		var/list/changed_vars = list()
		var/list/changing_vars = params2list(A.map_storage_saved_vars)
		if(contents && A.load_datums)
			changing_vars += "reagents"
			changing_vars += "air_contents"
		var/ind = saving_references.Find(A)
		if(ind)
			changed_vars["**ref**"] = "[ind]"
		else
			saving_references += A
			changed_vars["**ref**"] = "[saving_references.len]"
		for(var/v in changing_vars)
			if(A.vars.Find(v))
				if(istype(A.vars[v], /obj))
					var/atom/movable/varob = A.vars[v]
					var/conref = ObjectReference(varob.type)
					if(conref)
						var/conparams = BuildSavedVarsData(varob, 1)
						var/final = "special**obj[conref]"
						var/final_list = list()
						final_list[final] = conparams
						final_list += "special**notlist"
						changed_vars[v] = final_list
				else if(istype(A.vars[v], /datum))
					if(!A.load_datums) continue
					var/datum/vardat = A.vars[v]
					var/conref = DatumReference(vardat.type)
					if(conref)
						var/conparams = BuildSavedDatumData(vardat)
						var/final = "special**datum[conref]"
						var/final_list = list()
						final_list[final] = conparams
						final_list += "special**notlist"
						changed_vars[v] = final_list
				else if(istype(A.vars[v], /list))
					var/list/lis = A.vars[v]
					if(lis.len)
						var/firstval = lis[1]
						if(istype(firstval, /obj))
							var/list/fixed_list = list()
							for(var/obj/content in lis)
								var/conref = ObjectReference(content.type)
								if(conref)
									var/conparams = BuildSavedVarsData(content, 1)
									while(fixed_list["special**obj[conref]"])
										conref = "[conref] **"
									if(conparams)
										fixed_list["special**obj[conref]"] += conparams
									else
										fixed_list += "special**obj[conref]"								
							changed_vars[v] = fixed_list
						else if(istype(firstval, /datum))
							if(!A.load_datums) continue
							var/list/fixed_list = list()
							for(var/datum/content in lis)
								var/conref = DatumReference(content.type)
								if(conref)
									var/conparams = BuildSavedDatumData(content)
									while(fixed_list["special**datum[conref]"])
										conref = "[conref] **"
									if(conparams)
										fixed_list["special**datum[conref]"] += conparams
									else
										fixed_list += "special**datum[conref]"
							changed_vars[v] = fixed_list
						else
							changed_vars[v] = A.vars[v]
					else
						if(A.vars[v] != initial(A.vars[v]))
							changed_vars[v] = "special**emptylist"
				else
					if(A.vars[v] != initial(A.vars[v]) || v == "pixel_x" || v == "pixel_y")
						changed_vars[v] = A.vars[v]
		
		changed_vars["special**contents"] = content_refs
		// If there are any changed vars, convert them to params and return them.
		if(changed_vars.len)
			return mdlist2params(changed_vars)
		else
			return null
	proc/BuildSavedDatumData(datum/A)
		// If this object has no variables to save, skip it.
		if(!A.vars["map_storage_saved_vars"])
			return null
		var/map_storage_saved_vars = A.vars["map_storage_saved_vars"]
		// Add any variables changed and their associated values to a list called changed_vars.
		var/list/changed_vars = list()
		for(var/v in params2list(map_storage_saved_vars))
			if(A.vars.Find(v))
				if(istype(A.vars[v], /obj))
					var/atom/movable/varob = A.vars[v]
					var/conref = ObjectReference(varob.type)
					if(conref)
						var/conparams = BuildSavedVarsData(varob, 1)
						var/final = "special**obj[conref]"
						var/final_list = list()
						final_list[final] = conparams
						final_list += "special**notlist"
						changed_vars[v] = final_list
				else if(istype(A.vars[v], /datum))
					var/datum/vardat = A.vars[v]
					var/conref = DatumReference(vardat.type)
					if(conref)
						var/conparams = BuildSavedDatumData(vardat)
						var/final = "special**datum[conref]"
						var/final_list = list()
						final_list += "special**notlist"
						final_list[final] = conparams
						changed_vars[v] = final_list
				else if(istype(A.vars[v], /list))
					var/list/lis = A.vars[v]
					if(lis.len)
						var/firstval = lis[1]
						if(istype(firstval, /obj))
							var/list/fixed_list = list()
							for(var/obj/content in lis)
								var/conref = ObjectReference(content.type)
								if(conref)
									var/conparams = BuildSavedVarsData(content, 1)
									while(fixed_list["special**obj[conref]"])
										conref = "[conref] **"
									if(conparams)
										fixed_list["special**obj[conref]"] += conparams
									else
										fixed_list += "special**obj[conref]"
							changed_vars[v] = fixed_list
						else if(istype(firstval, /datum))
							var/list/fixed_list = list()
							for(var/datum/content in lis)
								var/conref = DatumReference(content.type)
								if(conref)
									var/conparams = BuildSavedDatumData(content)
									while(fixed_list["special**datum[conref]"])
										conref = "[conref] **"
									if(conparams)
										fixed_list["special**datum[conref]"] += conparams
									else
										fixed_list += "special**datum[conref]"
							changed_vars[v] = fixed_list
						else
							changed_vars[v] = A.vars[v]
					else
						if(A.vars[v] != initial(A.vars[v]))
							changed_vars[v] = "special**emptylist"
				else
					if(A.vars[v] != initial(A.vars[v]) || v == "pixel_x" || v == "pixel_y")
						if(A.vars[v] == null)
							changed_vars[v] = "special**null"
						else
							changed_vars[v] = A.vars[v]
			else
				if(initial(A.vars[v]) != null)
					changed_vars[v] = "special**null"
		var/ind = saving_references.Find(A)
		if(ind)
			changed_vars["**ref**"] = "[ind]"
		else
			saving_references += A
			changed_vars["**ref**"] = "[saving_references.len]"
		// If there are any changed vars, convert them to params and return them.
		if(changed_vars.len)
			return mdlist2params(changed_vars)
		else
			return null	


// Returns true if the value is purely numeric, return false if there are non-numeric
// characters contained within the text string.
	proc/IsNumeric(text)
		if(isnum(text))
			return 1
		for(var/n in 1 to length(text))
			var/ascii = text2ascii(text, n)
			if(ascii < 45 || ascii > 57)
				return 0
			if(ascii == 47)
				return 0
		return 1



// If the value is numeric, convert it to a number and return the number value. If
// the value is text, then return it as it is.
	proc/Numeric(text)
		if(IsNumeric(text))
			return text2num(text)
		else
			if(findtext(text, "e+"))
				var/list/nums = string_explode(text, "e+")
				if(nums.len > 1 && nums.len < 3)
					var/integer = text2num(nums[1])
					var/exp = text2num(nums[2])
					if(IsNumeric(integer) && IsNumeric(exp))
						return integer*10**exp
			return text



// This function will return true if the file is password protected.
	proc/PasswordLocked(savefile/savefile)
		if(!savefile)
			return 0
		savefile.cd = "/data"
		if(savefile["password"])
			return 1
		else
			return 0


// This checks to see if, first of all, this is even a valid map storage file, and
// if it is a map storage file, then does it have the same game_id as what is
// currently being used? Otherwise it is not compatable.
	proc/IsValid(savefile/savefile)
		if(!savefile)
			return 0

		// Make sure that this file has the appropriate subdirectories.
		savefile.cd = "/"
		if(!savefile.dir.Find("data"))
			return 0
		if(!savefile.dir.Find("map"))
			return 0

		// Find out if this file isn't compatable because the game_ids don't match.
		savefile.cd = "/data"
		if(savefile["game_id"] != md5(src.game_id))
			return 0
		return 1


// This generates a verification code for the file. If the verification code
// generated by the file does not match the verification code stored in the file
// (which is not included in this check), then the file has been modified.
	proc/Verification(savefile/savefile)
		savefile.cd = "/"
		var/verification_text = ""
		var/list/dirs = list("map", "data", "extra")
		for(var/dir in dirs)
			if(savefile.dir.Find(dir))
				verification_text += savefile.ExportText("/[dir]")
		return md5(verification_text)


// Returns 1 if the savefile has not been modified since it was saved.
	proc/Verify(savefile/savefile)
		savefile.cd = "/"
		if(src.Verification(savefile) == savefile["verify"])
			return 1
		else
			return 0


// Returns the value of an extra variable saved within the file.
	proc/GetExtra(savefile/savefile, value)
		if(!savefile)
			return

		savefile.cd = "/extra"

		// If a specific value is requested, it will return the
		// associated value for the extra variable specified.
		if(value)
			return savefile[value]

		// If no specific variable is asked about, it will return a
		// list of all the extra variables and their associated values.
		else
			var/list/extra = list()
			for(var/dir in savefile.dir)
				extra[dir] = Numeric(savefile[dir])
			return extra



/*************************************************************************
PRIMARY SAVING AND LOADING FUNCTIONS
**************************************************************************/

map_storage

	proc/Save_Char(client/C, var/datum/mind/H, var/mob/living/carbon/human/Firstbod, var/slot = 0)
		var/ckey = ""
		var/stat_Grit = 0
		var/stat_Fortitude = 0
		var/stat_Reflex = 0
		var/stat_Creativity = 0
		var/stat_Focus = 0
		var/ambition = ""
		var/body_type = 0
		var/current = 0
		var/current_status = "Alive"
		if(H)
			if(H.current && H.current.ckey && !Firstbod)
				ckey = H.current.ckey
				stat_Grit = H.stat_Grit
				stat_Fortitude = H.stat_Fortitude
				stat_Reflex = H.stat_Reflex
				stat_Creativity = H.stat_Creativity
				stat_Focus = H.stat_Focus
				ambition = H.ambition
				slot = H.char_slot
				/**
				if(!slot)
					message_admins("saving character without slot set [H.current.ckey]")
					return
				if(istype(H.current, /mob/living/carbon/human))
					body_type = 1
					current = save_body(C, H.current)
				else if(istype(H.current, /mob/living/carbon/brain/))
					body_type = 2
					current = save_brain(C, H.current)
				else if(istype(H.current, /mob/living/silicon/robot/))
					body_type = 3
					current = save_robot(C, H.current)
				else if(istype(H.current, /mob/living/simple_animal/spiderbot))
					body_type = 4
					current = save_spiderbot(C, H.current)
				else
					message_admins("Unhandled save operation! [H.current]")
					return
				**/			
			else if(Firstbod)
				ckey = C.ckey
				body_type = 1
			//	current = save_body(C, Firstbod)
			//	current_status = "alive"
				
// Saves all of the turfs and objects within turfs to their own directories withn
// the specifeid savefile name. If objects or turfs have variables to keep track
// of, it will check to see if those variables have been modified and record the
// new values of any modified variables along with the object. It uses an object
// reference, which records each object type as a position in a list so that it
// can be references using a number instead of a fully written out type class.
// You can also specify a name and password for the map, along with any extra
// variables (in params format) that you want saved along with the map file.
	proc/Save(savefile/savefile, list/areas, extra)

		// Abort if no filename specified.
		if(!savefile)
			return 0

		// Clear the object reference.
		src.object_reference = list()
		obj_references = list()
		saving_references = list()
		// Find out how many objects we have to work with here, so that we'll know
		// how much progress we've made so far and we can display it to the output.
		var/object_total = world.contents.len
		var/object_progress = 0
		var/objects_stored = 0
		var/last_percent = 0

		// ***** MAP SECTION *****
		for(var/A in areas)
			for(var/turf/turf in get_area_turfs(A))
				var/list/tile_contents = list()
				
				var/turf_ref = ObjectReference(turf.type)
				object_progress++

				// If this turf is not an ignored type, then save it.
				if(turf_ref)
					objects_stored++

					// If there are changed variables to save, add those too.
					var/params = BuildSavedVarsData(turf)
					if(params)
						tile_contents["[turf_ref]"] = params
					else
						tile_contents += "[turf_ref]"

				// Look for objects in this turf to save as well.
				for(var/atom/movable/movable in turf)
					if(movable.loc != turf) continue
					var/ref = ObjectReference(movable.type)
					object_progress++

					// If this object isn't ignored, save it.
					if(ref)
						objects_stored++

						// If there are changed variables to save, add those too.
						
						var/params = BuildSavedVarsData(movable, 1)
						while(tile_contents["[ref]"])
							ref = "[ref] **"
						if(params)
							tile_contents["[ref]"] += params
						else
							tile_contents += "[ref]"

						
							
				// If there is anything to save in this tile, then add the
				// contents of the tile to the savefile.
				if(tile_contents.len)
					savefile.cd = "/map/[turf.z]/[turf.y]/[turf.x]"
					savefile << mdlist2params(tile_contents)
				// Send the percentage done to the output.
				var/percent = 100 / object_total * object_progress
				if(percent > last_percent+1)
					last_percent = percent
					src.SaveOutput(round(percent))


		// ***** EXTRA SECTION *****

		// If any extra values to be saved are included in the function, then
		// it will add those to the savefile. Those extras can be in either list or
		// params format, and will be read accordingly.
		if(extra)
			savefile.cd = "/extra"

			if(!istype(extra, /list))
				extra = params2list(extra)
			for(var/dat in extra)
				var/value = extra[dat]
				savefile["[dat]"] = value

		// ***** DATA SECTION *****
		savefile.cd = "/data"
		
		// Record how many objects are stored in the map.
		savefile["objects"] = objects_stored

		// The object reference is now turned into params and stored for future reference.
		var/object_params = mdlist2params(src.object_reference)
		var/datum_params = mdlist2params(src.datum_reference)
		savefile["object_reference"] = object_params
		savefile["datum_reference"] = datum_params
		savefile["contents"] = mdlist2params(obj_references)
		savefile["game_id"] = md5(src.game_id)
		
		// Create a verification code based on the contents of this file.
		savefile["verify"] = src.Verification(savefile)

		src.SaveOutput(100)

		// TEMPORARY - display savefile to the world log.
		//return savefile.ExportText("/")

		// The function will return an uncompressed text output if desired.
		return 1

		
	
			
// Loading a file is pretty straightforward - you specify the savefile to load from
// (make sure its an actual savefile, not just a file name), and if necessary you
// include the savefile's password as an argument. This will automatically check to
// make sure that the file provided is a valid map file, that the password matches,
// and that the verification values are what they're supposed to be (meaning the
// file has not been tampered with). Once everything is checked, it will resize the
// world map to fit the saved map, then unload all saved objects. Finally, any extra
// values that you included in the savefile will be returned by this function as
// an associative list.
	proc/Load(savefile/savefile, password)
		all_loaded = list()
	
		// Make sure a map file is provided.
		if(!savefile)
			return

		// Make sure we have a valid map file.
		if(!src.IsValid(savefile))
			world.log << "Invalid map format ([savefile])."
			return

		// Explore the data directory.
		savefile.cd = "/data"

		// Clear the old object reference and load the stored one.
		var/stored_object_reference = savefile["object_reference"]
		var/stored_contents = savefile["contents"]
		var/stored_datum_reference = savefile["datum_reference"]
		// Clear the object reference and replace it with the stored reference.
		src.object_reference = params2list(stored_object_reference)
		datum_reference = params2list(stored_datum_reference)				
		src.obj_references = params2mdlist(stored_contents)
		// These are used to keep track of how many objects have been loaded so
		// far out of all the objects that need to be loaded.
		var/object_total = savefile["objects"]
		var/object_progress = 0
		var/last_percent = 0
		existing_references = list()
		// Compile the list of extras to return at the end of the function.
		savefile.cd = "/extra"
		var/list/extra = list()
		for(var/dir in savefile.dir)
			extra[dir] = Numeric(savefile[dir])

		// Load the saved contents of each tile.
		savefile.cd = "/map"

		for(var/z in savefile.dir)
			savefile.cd = "/map/[z]"

			for(var/y in savefile.dir)
				savefile.cd = "/map/[z]/[y]"

				for(var/x in savefile.dir)
					var/list/references = params2list(savefile[x])
					var/turf/old_turf = locate(text2num(x), text2num(y), text2num(z))
					if(old_turf)
						old_turf.blocks_air = 1
						var/finished = 0
						while(!finished)
							finished = 1
							for(var/obj/ob in old_turf.contents)
								finished = 0
								ob.forceMove(locate(200, 100, 2))
								ob.Destroy()
					for(var/ref in references)

						// Locate the object type in the object reference.
						var/object_type = src.object_reference[text2num(ref)]
						if(!object_type)
							continue
						if(findtext(object_type, "**"))
							var/list/fixed = string_explode(object_type, "**")
							object_type = fixed[1]
						// Create the loaded object or turf.
						var/turf/newloc = locate(text2num(x), text2num(y), text2num(z))
						var/turfi = findtext(object_type, "/turf/")
						var/atom/movable/object
						var/params = references[ref]
						var/list/param_list = params2mdlist(params)
						if(param_list["pecial**ref"])
							param_list["**ref**"] = param_list["pecial**ref"]
						if(param_list["**ref**"])
							if(existing_references[param_list["**ref**"]])
								object = existing_references[param_list["**ref**"]]
								if(istype(object, /turf))
									object = null
								else
									object.forceMove(newloc)
						else
							message_admins("No ref found for [object_type]")
						if(!object)
							if(turfi)
								newloc.ChangeTurf(object_type)
								object = locate(text2num(x), text2num(y), text2num(z))
							else
								object = new object_type (newloc)
							existing_references[param_list["**ref**"]] = object
							Load_Params(param_list, object)
							all_loaded += object
						// If the reference has any parameters attached, assign them to the new object.
						
							
						object_progress++

						// Send the percentage done to the output.
						var/percent = 100 / object_total * object_progress
						if(percent > last_percent+1)
							last_percent = percent
							src.LoadOutput(round(percent))
		for(var/atom/movable/ob in all_loaded)
			ob.initialize()
			ob.after_load()
			if(istype(ob, /turf/simulated))
				var/turf/simulated/Te = ob
				Te.blocks_air = initial(Te.blocks_air)
				Te.new_air()
			src.LoadOutput(100)

		return extra


/*************************************************************************
SUPPLEMENTARY FUNCTIONS
**************************************************************************/

map_storage

	// These is called routinely as the load and save functions make progress.
	// If you want to display how much of the map has been saved or loaded
	// somewhere, you can use this function to do it.

	proc/SaveOutput(percent)
		return

	proc/LoadOutput(percent)
		return

	// This is called when loading a map after all the verification and
	// password stuff is completed so that the map can have a fresh template
	// to work with.
	proc/ClearMap()
		for(var/turf/T in world)
			for(var/atom/movable/A in T)
				if(ismob(A))
					var/mob/M = A
					if(M.client)
						M.loc = null
						continue
				del(A)
			del(T)
		return
